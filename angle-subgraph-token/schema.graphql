type ANGLE @entity {
  # Address of the angle owner
  id: ID!
  # Balance
  balance: BigInt!
}

type agToken @entity {
  # Address of the owner + address of the token
  id: ID!
  owner: String!
  token: String!
  stableName: String
  balance: BigInt!
  staked: BigInt!
}

type sanToken @entity {
  # Address of the owner + address of the token
  id: ID!
  owner: String!
  token: String!
  collatName: String
  stableName: String
  balance: BigInt!
  staked: BigInt!
}

type externalToken @entity {
  # Address of the owner + address of the token
  id: ID!
  owner: String!
  token: String!
  name: String
  balance: BigInt!
  staked: BigInt!
}

type CapitalGain @entity {
  # Address
  id: ID!
  gains: BigInt!
  lastPosition: BigInt!
  lastStakedPosition: BigInt!
}

type Contracts @entity {
  id: ID!
}

type GaugeData @entity {
  # Address of the gauge contract
  id: ID!
  type: BigInt
  rewardDatas: [GaugeRewardData!]! @derivedFrom(field: "gauge")
  relWeigth: BigInt
  # Block Number of last update
  blockNumber: BigInt!
  timestamp: BigInt!
}

type GaugeHistoricalData @entity {
  # Address of the gauge contract + timestamp
  id: ID!
  type: BigInt
  relWeigth: BigInt
  # Block Number of last update
  blockNumber: BigInt!
  timestamp: BigInt!
}

type GaugeRewardData @entity {
  # Address of the gauge contract + reward token
  id: ID!
  gauge: GaugeData
  token: String!
  distributor: String
  periodFinish: BigInt
  rewardRate: BigInt
  totalSupply: BigInt
  workingSupply: BigInt
  lastUpdateTime: BigInt
  # Block Number of last update
  blockNumber: BigInt!
  timestamp: BigInt!
}

type GaugeRewardHistoricalData @entity {
  # Address of the gauge contract + reward token + timestamp
  id: ID!
  gauge: GaugeData!
  token: String!
  distributor: String
  periodFinish: BigInt
  rewardRate: BigInt
  totalSupply: BigInt
  workingSupply: BigInt
  lastUpdateTime: BigInt
  # Block Number of last update
  blockNumber: BigInt!
  timestamp: BigInt!
}
