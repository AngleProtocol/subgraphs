type ANGLE @entity {
  # Address of the angle owner
  id: ID!
  # Balance
  balance: BigInt!
}

type ANGLEHistorical @entity {
  # Address of the angle owner + rounded timestamp
  id: ID!
  owner: String!
  # Balance
  balance: BigInt!
  timestamp: BigInt!
}

type lockedANGLE @entity {
  # veANGLE address
  id: ID!
  timestamp: BigInt!
  angleLocked: BigInt!
  veSupply: BigInt!
}

type lockedANGLEHistorical @entity {
  # Timestamp
  id: ID!
  timestamp: BigInt!
  angleLocked: BigInt!
  veSupply: BigInt!
}

type veANGLEData @entity {
  # Address of the angle owner
  id: ID!
  bias: BigInt!
  slope: BigInt!
  lastUpdate: BigInt!
  endLocked: BigInt!
  amount: BigInt!
}

type veANGLEHistorical @entity {
  # Address of the angle owner + timestamp
  id: ID!
  user: String!
  bias: BigInt!
  slope: BigInt!
  timestamp: BigInt!
  endLocked: BigInt!
  amount: BigInt!
}

type agToken @entity {
  # Address of the owner + address of the token
  id: ID!
  owner: String!
  token: String!
  stableName: String
  balance: BigInt!
  staked: BigInt!
}

type sanToken @entity {
  # Address of the owner + address of the token
  id: ID!
  owner: String!
  token: String!
  collatName: String
  stableName: String
  balance: BigInt!
  staked: BigInt!
}

type externalToken @entity {
  # Address of the owner + address of the token
  id: ID!
  owner: String!
  token: String!
  name: String
  balance: BigInt!
  staked: BigInt!
}

type CapitalGain @entity {
  # Address
  id: ID!
  gains: BigInt!
  lastPosition: BigInt!
  lastStakedPosition: BigInt!
}

type Contracts @entity {
  id: ID!
}

type GaugeData @entity {
  # Address of the gauge contract
  id: ID!
  type: BigInt
  rewardDatas: [GaugeRewardData!]! @derivedFrom(field: "gauge")
  relWeigth: BigInt
  # Block Number of last update
  blockNumber: BigInt!
  timestamp: BigInt!
}

type GaugeHistoricalData @entity {
  # Address of the gauge contract + timestamp
  id: ID!
  type: BigInt
  relWeigth: BigInt
  # Block Number of last update
  blockNumber: BigInt!
  timestamp: BigInt!
}

type GaugeRewardData @entity {
  # Address of the gauge contract + reward token
  id: ID!
  gauge: GaugeData
  token: String!
  decimals: BigInt
  decimalsStakedToken: BigInt
  tokenSymbol: String
  distributor: String
  periodFinish: BigInt
  rewardRate: BigInt
  totalSupply: BigInt
  workingSupply: BigInt
  lastUpdateTime: BigInt
  # Block Number of last update
  blockNumber: BigInt!
  timestamp: BigInt!
}

type GaugeRewardHistoricalData @entity {
  # Address of the gauge contract + reward token + timestamp
  id: ID!
  gauge: GaugeData!
  token: String!
  decimals: BigInt
  decimalsStakedToken: BigInt
  tokenSymbol: String
  distributor: String
  periodFinish: BigInt
  rewardRate: BigInt
  totalSupply: BigInt
  workingSupply: BigInt
  lastUpdateTime: BigInt
  # Block Number of last update
  blockNumber: BigInt!
  timestamp: BigInt!
}

type UtilisationData @entity {
  # agToken address
  id: ID!
  # agToken address
  stablecoin: String!
  # agToken ticker
  stableName: String!

  # Internal variable to avoid tx double counting
  _lastTx: String!

  # Number of agToken available
  circulationSupply: BigInt!
  # Total transfer volume
  volume: BigInt!
  # Number of transfer transactions for this agToken
  txCount: BigInt!
  # Number of different addresses holding a positive balance of this agToken
  holderCount: BigInt!

  ## Time tracking
  # BlockNumber of last update
  blockNumber: BigInt!
  # Timestamp of last update
  timestamp: BigInt!
}

type UtilisationHistoricalData @entity {
  # agToken address + '_' + timestamp
  id: ID!
  # agToken address
  stablecoin: String!
  # agToken ticker
  stableName: String!

  # Number of agToken available
  circulationSupply: BigInt!
  # Total transfer volume
  volume: BigInt!
  # Number of transfer transactions for this agToken
  txCount: BigInt!
  # Number of different addresses holding a positive balance of this agToken
  holderCount: BigInt!

  ## Time tracking
  # BlockNumber of last update, modulo 30 minutes worth of blocks
  blockNumber: BigInt!
  # Timestamp of last update, modulo 30 minutes
  timestamp: BigInt!
}
